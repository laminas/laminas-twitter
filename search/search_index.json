{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-twitter Provides an object oriented PHP wrapper for the Twitter API . Installation Run the following to install this library: $ composer require laminas/laminas-twitter Usage Instantiate the Twitter class by providing your Twitter consumer key and secret, as well as the access token and secret: use Laminas\\Twitter\\Twitter; $twitter = new Twitter([ 'access_token' =&gt; [ 'token' =&gt; '&lt;token value&gt;', 'secret' =&gt; '&lt;token secret value&gt;', ], 'oauth_options' =&gt; [ 'consumerKey' =&gt; '&lt;consumer key value&gt;', 'consumerSecret' =&gt; '&lt;consumer secret value&gt;', ], ]); Once you have done that, you may start making calls to the API. This can be done in one of three ways: Using direct method calls on the Twitter class. A full list is provided below. Using the \"proxy\" functionality. In these cases, you will provide the first path element of the API, and then call a method on it: $twitter-&gt;statuses-&gt;update($message) . Using the get() or post() methods. Available methods accountVerifyCredentials() : Response applicationRateLimitStatus() : Response blocksCreate($id) : Response blocksDestroy($id) : Response blocksIds(int $cursor = -1) : Response blocksList(int $cursor = -1) : Response directMessagesDestroy($id) : Response directMessagesMessages(array $options = []) : Response directMessagesNew($user, string $text, array $extraParams = []) : Response directMessagesEventsNew($user, string $text, array $extraParams = []) : Response directMessagesSent(array $options = []) : Response favoritesCreate($id) : Response favoritesDestroy($id) : Response favoritesList(array $options = []) : Response followersIds($id, array $params = []) : Response friendsIds($id, array $params = []) : Response friendshipsCreate($id, array $params = []) : Response friendshipsLookup($id, array $params = []) : Response friendshipsDestroy($id) : Response listsMembers($listIdOrSlug, array $params = []) : Response listsMemberships($id, array $params = []) : Response listsSubscribers($id, array $params = []) : Response searchTweets(string $query, array $options = []) : Response statusesDestroy($id) : Response statusesHomeTimeline(array $options = []) : Response statusesMentionsTimeline(array $options = []) : Response statusesSample() : Response statusesShow($id, array $options = []) : Response statusesUpdate(string $status, $inReplyToStatusId = null, $extraAttributes = []) : Response statusesUserTimeline(array $options = []) : Response usersLookup($id, array $params = []) : Response usersSearch(string $query, array $options = []) : Response usersShow($id) : Response Proxy Properties The following proxy properties are allowed: account application blocks directmessages favorites followers friends friendships lists search statuses users In each case, you can identify available methods for the proxy by comparing the proxy name to the above list of methods. As an example, the users proxy allows the following: $twitter-&gt;users-&gt;lookup($id, array $params = []); $twitter-&gt;users-&gt;search(string $query, array $options = []); $twitter-&gt;users-&gt;show($id); Direct access The Twitter API has dozens of endpoints, some more popular and/or useful than others. As such, we are only providing a subset of what is available. However, we allow you to access any endpoint via either the get() or post() methods, which have the following signatures: public function get(string $path, array $query = []) : Response; public function post(string $path, $data = null) : Response; In each case, the $path is the API endpoint as detailed in the Twitter API documentation, minus any .json suffix, and the method name corresponds to whether the request happens via HTTP GET or POST. For HTTP GET requests, the $query argument provides any query string parameters you want to pass for that endpoint. As an example, if you were requesting statuses/home_timeline , you might pass count or since_id . For HTTP POST requests, the $data argument can be one of: An associative array of data. A serializable object of data. A string representing the raw payload. The data to provide will vary based on the endpoint. Media uploads Since version 3.0, we have supported media uploads via the classes Laminas\\Twitter\\Media , Image , and Video . In each case, you will instantiate the appropriate class with the local filesystem path of the image to upload and the media type, followed by calling upload() with a properly configured HTTP client. The response will contain a media_id property, which you can then provide via the media_ids parameter when posting a status: $image = new Image('data/logo.png', 'image/png'); $response = $image-&gt;upload($twitter-&gt;getHttpClient()); $twitter-&gt;statusUpdate( 'A post with an image', null, ['media_ids' =&gt; [$response-&gt;media_id]] ); When providing media for direct messages, you must provide additional flags to the media class's constructor: A flag indicating it is for a direct message A flag indicating whether or not the uploaded media may be shared/re-used in other direct messages. $image = new Image( 'data/logo.png', 'image/png', $forDirectMessage = true, $shared = false ); $upload = $image-&gt;upload($twitter-&gt;getHttpClient()); Unlike non-DM media uploads, the identifier will be in the id_str parameter of the returned upload instance; use that as a media_id in your DM: $twitter-&gt;directmessagesEventsNew( $user, $message, ['media_id' =&gt; $upload-&gt;id_str] ); Note: direct messages only support a single attachment. Rate limiting As of version 3.0, we now provide introspection of Twitter's rate limit headers, allowing you to act on them: $response = $twitter-&gt;statusUpdate('A post'); $rateLimit = $response-&gt;getRateLimit(); if ($rateLimit-&gt;remaining === 0) { // Time to back off! sleep($rateLimit-&gt;reset); // seconds left until reset }","title":"Home"},{"location":"#laminas-twitter","text":"Provides an object oriented PHP wrapper for the Twitter API .","title":"laminas-twitter"},{"location":"#installation","text":"Run the following to install this library: $ composer require laminas/laminas-twitter","title":"Installation"},{"location":"#usage","text":"Instantiate the Twitter class by providing your Twitter consumer key and secret, as well as the access token and secret: use Laminas\\Twitter\\Twitter; $twitter = new Twitter([ 'access_token' =&gt; [ 'token' =&gt; '&lt;token value&gt;', 'secret' =&gt; '&lt;token secret value&gt;', ], 'oauth_options' =&gt; [ 'consumerKey' =&gt; '&lt;consumer key value&gt;', 'consumerSecret' =&gt; '&lt;consumer secret value&gt;', ], ]); Once you have done that, you may start making calls to the API. This can be done in one of three ways: Using direct method calls on the Twitter class. A full list is provided below. Using the \"proxy\" functionality. In these cases, you will provide the first path element of the API, and then call a method on it: $twitter-&gt;statuses-&gt;update($message) . Using the get() or post() methods.","title":"Usage"},{"location":"#available-methods","text":"accountVerifyCredentials() : Response applicationRateLimitStatus() : Response blocksCreate($id) : Response blocksDestroy($id) : Response blocksIds(int $cursor = -1) : Response blocksList(int $cursor = -1) : Response directMessagesDestroy($id) : Response directMessagesMessages(array $options = []) : Response directMessagesNew($user, string $text, array $extraParams = []) : Response directMessagesEventsNew($user, string $text, array $extraParams = []) : Response directMessagesSent(array $options = []) : Response favoritesCreate($id) : Response favoritesDestroy($id) : Response favoritesList(array $options = []) : Response followersIds($id, array $params = []) : Response friendsIds($id, array $params = []) : Response friendshipsCreate($id, array $params = []) : Response friendshipsLookup($id, array $params = []) : Response friendshipsDestroy($id) : Response listsMembers($listIdOrSlug, array $params = []) : Response listsMemberships($id, array $params = []) : Response listsSubscribers($id, array $params = []) : Response searchTweets(string $query, array $options = []) : Response statusesDestroy($id) : Response statusesHomeTimeline(array $options = []) : Response statusesMentionsTimeline(array $options = []) : Response statusesSample() : Response statusesShow($id, array $options = []) : Response statusesUpdate(string $status, $inReplyToStatusId = null, $extraAttributes = []) : Response statusesUserTimeline(array $options = []) : Response usersLookup($id, array $params = []) : Response usersSearch(string $query, array $options = []) : Response usersShow($id) : Response","title":"Available methods"},{"location":"#proxy-properties","text":"The following proxy properties are allowed: account application blocks directmessages favorites followers friends friendships lists search statuses users In each case, you can identify available methods for the proxy by comparing the proxy name to the above list of methods. As an example, the users proxy allows the following: $twitter-&gt;users-&gt;lookup($id, array $params = []); $twitter-&gt;users-&gt;search(string $query, array $options = []); $twitter-&gt;users-&gt;show($id);","title":"Proxy Properties"},{"location":"#direct-access","text":"The Twitter API has dozens of endpoints, some more popular and/or useful than others. As such, we are only providing a subset of what is available. However, we allow you to access any endpoint via either the get() or post() methods, which have the following signatures: public function get(string $path, array $query = []) : Response; public function post(string $path, $data = null) : Response; In each case, the $path is the API endpoint as detailed in the Twitter API documentation, minus any .json suffix, and the method name corresponds to whether the request happens via HTTP GET or POST. For HTTP GET requests, the $query argument provides any query string parameters you want to pass for that endpoint. As an example, if you were requesting statuses/home_timeline , you might pass count or since_id . For HTTP POST requests, the $data argument can be one of: An associative array of data. A serializable object of data. A string representing the raw payload. The data to provide will vary based on the endpoint.","title":"Direct access"},{"location":"#media-uploads","text":"Since version 3.0, we have supported media uploads via the classes Laminas\\Twitter\\Media , Image , and Video . In each case, you will instantiate the appropriate class with the local filesystem path of the image to upload and the media type, followed by calling upload() with a properly configured HTTP client. The response will contain a media_id property, which you can then provide via the media_ids parameter when posting a status: $image = new Image('data/logo.png', 'image/png'); $response = $image-&gt;upload($twitter-&gt;getHttpClient()); $twitter-&gt;statusUpdate( 'A post with an image', null, ['media_ids' =&gt; [$response-&gt;media_id]] ); When providing media for direct messages, you must provide additional flags to the media class's constructor: A flag indicating it is for a direct message A flag indicating whether or not the uploaded media may be shared/re-used in other direct messages. $image = new Image( 'data/logo.png', 'image/png', $forDirectMessage = true, $shared = false ); $upload = $image-&gt;upload($twitter-&gt;getHttpClient()); Unlike non-DM media uploads, the identifier will be in the id_str parameter of the returned upload instance; use that as a media_id in your DM: $twitter-&gt;directmessagesEventsNew( $user, $message, ['media_id' =&gt; $upload-&gt;id_str] ); Note: direct messages only support a single attachment.","title":"Media uploads"},{"location":"#rate-limiting","text":"As of version 3.0, we now provide introspection of Twitter's rate limit headers, allowing you to act on them: $response = $twitter-&gt;statusUpdate('A post'); $rateLimit = $response-&gt;getRateLimit(); if ($rateLimit-&gt;remaining === 0) { // Time to back off! sleep($rateLimit-&gt;reset); // seconds left until reset }","title":"Rate limiting"},{"location":"intro/","text":"laminas-twitter Introduction Laminas\\Twitter\\Twitter provides a client for the Twitter API . Laminas\\Twitter\\Twitter allows you to query the public timeline. If you provide a username and OAuth details for Twitter, or your access token and secret, it will allow you to get and update your status, reply to friends, direct message friends, mark tweets as favorites, and much more. Laminas\\Twitter\\Twitter wraps all web service operations, including OAuth, and all methods return an instance of Laminas\\Twitter\\Response . Laminas\\Twitter\\Twitter is broken up into subsections so you can easily identify which type of call is being requested. account allows you to check that your account credentials are valid application allows you to check your API rate limits. blocks blocks and unblocks users from following you. directMessages retrieves the authenticated user's received direct messages, deletes direct messages, and sends new direct messages. favorites lists, creates, and removes favorite tweets. friendships creates and removes friendships for the authenticated user. search allows you to search statuses for specific criteria. statuses retrieves the public and user timelines and shows, updates, destroys, and retrieves replies for the authenticated user. users retrieves friends and followers for the authenticated user and returns extended information about a passed user. Installation Use Composer to install this package: $ composer require laminas/laminas-twitter Quick Start To get started, first you'll need to either create a new application with Twitter, or get the details of an existing one you control. To do this: Go to https://developer.twitter.com/ and sign in. Go to https://apps.twitter.com/ Either create a new application, or select an existing one. On the application's settings page, grab the following information: From the header \"OAuth settings\", grab the \"Consumer key\" and \"Consumer secret\" values. From the header \"Your access token\", grab the \"Access token\" and \"Access token secret\" values. Armed with this information, you can now configure and create your Laminas\\Twitter\\Twitter instance: $config = [ 'access_token' =&gt; [ 'token' =&gt; 'twitter-access-token-here', 'secret' =&gt; 'twitter-access-secret-here', ], 'oauth_options' =&gt; [ 'consumerKey' =&gt; 'twitter-consumer-key-here', 'consumerSecret' =&gt; 'twitter-consumer-secret-here', ], 'http_client_options' =&gt; [ 'adapter' =&gt; Laminas\\Http\\Client\\Adapter\\Curl::class, 'curloptions' =&gt; [ CURLOPT_SSL_VERIFYHOST =&gt; false, CURLOPT_SSL_VERIFYPEER =&gt; false, ], ], ]; $twitter = new Laminas\\Twitter\\Twitter($config); Make sure you substitute the values you discovered earlier in the configuration before attempting to connect. Note on SSL Certificate Verification Twitter has a known issue with the SSL certificate for their API endpoints, which requires that you use insecure settings for the SSL certificate verification. Once you have the client configured, you can start consuming it: // Verify your credentials: $response = $twitter-&gt;account-&gt;verifyCredentials(); if (!$response-&gt;isSuccess()) { die('Something is wrong with my credentials!'); } // Search for something: $response = $twitter-&gt;search-&gt;tweets('#zf2'); foreach ($response-&gt;toValue() as $tweet) { printf(\"%s\\n- (%s)\\n\", $tweet-&gt;text, $tweet-&gt;user-&gt;name); } // Tweet something: $twitter-&gt;statuses-&gt;update('Hello world!'); Every action you take returns a Laminas\\Twitter\\Response object. This object contains some general purpose methods for determining the status of the response ( isSuccess() , isError() ), and otherwise acts as a value object containing the data returned. Essentially, if the response returns an object, you will be able to access the members listed by the Twitter API documentation . In the case of responses that return arrays, such as the $twitter-&gt;search-&gt;tweets() example shown earlier, you should use the toValue() method of the response to retrieve the array. If you wish to dive in more into how authentication works, and what methods are exposed, keep reading! Authentication With the exception of fetching the public timeline, Laminas\\Twitter\\Twitter requires authentication as a valid user. This is achieved using the OAuth authentication protocol. OAuth is the only supported authentication mode for Twitter as of August 2010. The OAuth implementation used by Laminas\\Twitter\\Twitter is laminas-oauth . Creating the Twitter Class Laminas\\Twitter\\Twitter must authorize itself, on behalf of a user, before use with the Twitter API (except for public timeline). This must be accomplished using OAuth since Twitter has disabled it's basic HTTP authentication as of August 2010. There are two options to establishing authorization. The first is to implement the workflow of laminas-oauth via Laminas\\Twitter\\Twitter which proxies to an internal Laminas\\OAuth\\Consumer object. Please refer to the laminas-oauth documentation for a full example of this workflow - you can call all documented Laminas\\OAuth\\Consumer methods on Laminas\\Twitter\\Twitter including constructor options. You may also use laminas-oauth directly and only pass the resulting access token into Laminas\\Twitter\\Twitter . This is the normal workflow once you have established a reusable access token for a particular Twitter user. The resulting OAuth access token should be stored to a database for future use (otherwise you will need to authorize for every new instance of Laminas\\Twitter\\Twitter ). Bear in mind that authorization via OAuth results in your user being redirected to Twitter to give their consent to the requested authorization (this is not repeated for stored access tokens). This will require additional work (i.e. redirecting users and hosting a callback URL) over the previous HTTP authentication mechanism where a user just needed to allow applications to store their username and password. The following example demonstrates setting up Laminas\\Twitter\\Twitter which is given an already established OAuth access token. Please refer to the laminas-oauth documentation to understand the workflow involved. The access token is a serializable object, so you may store the serialized object to a database, and unserialize it at retrieval time before passing the objects into Laminas\\Twitter\\Twitter . The laminas-oauth documentation demonstrates the workflow and objects involved. /** * We assume $serializedToken is the serialized token retrieved from a database * or even $_SESSION (if following the simple laminas-oauth documented example) */ $token = unserialize($serializedToken); $twitter = new Laminas\\Twitter\\Twitter([ 'accessToken' =&gt; $token, 'oauth_options' =&gt; [ 'username' =&gt; 'johndoe', ], ]); // verify user's credentials with Twitter $response = $twitter-&gt;account-&gt;verifyCredentials(); Note on Twitter OAuth Authentication In order to authenticate with Twitter, ALL applications MUST be registered with Twitter in order to receive a Consumer Key and Consumer Secret to be used when authenticating with OAuth. This can not be reused across multiple applications - you must register each new application separately. Twitter access tokens have no expiry date, so storing them to a database is advised (they can, of course, be refreshed simply be repeating the OAuth authorization process). This can only be done while interacting with the user associated with that access token. The previous pre-OAuth version of Laminas\\Twitter\\Twitter allowed passing in a username as the first parameter rather than within an array. This is no longer supported. If you have registered an application with Twitter, you can also use the access token and access token secret they provide you in order to setup the OAuth consumer. This can be done as follows: $twitter = new Laminas\\Twitter\\Twitter([ 'access_token' =&gt; [ // or use \"accessToken\" as the key; both work 'token' =&gt; 'your-access-token', 'secret' =&gt; 'your-access-token-secret', ], 'oauth_options' =&gt; [ // or use \"oauthOptions\" as the key; both work 'consumerKey' =&gt; 'your-consumer-key', 'consumerSecret' =&gt; 'your-consumer-secret', ], ]); If desired, you can also specify a specific HTTP client instance to use, or provide configuration for the HTTP client. To provide the HTTP client, use the http_client or httpClient key, and provide an instance. To provide HTTP client configuration for setting up an instance, use the key http_client_options or httpClientOptions . As a full example: $twitter = new Laminas\\Twitter\\Twitter([ 'access_token' =&gt; [ // or use \"accessToken\" as the key; both work 'token' =&gt; 'your-access-token', 'secret' =&gt; 'your-access-token-secret', ], 'oauth_options' =&gt; [ // or use \"oauthOptions\" as the key; both work 'consumerKey' =&gt; 'your-consumer-key', 'consumerSecret' =&gt; 'your-consumer-secret', ], 'http_client_options' =&gt; [ 'adapter' =&gt; Laminas\\Http\\Client\\Adapter\\Curl::class, ], ]); Account Methods Verifying credentials verifyCredentials() tests if supplied user credentials are valid with minimal overhead. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;account-&gt;verifyCredentials(); Application Methods Rating limit status rateLimitStatus() returns the remaining number of API requests available to the authenticating user before the API limit is reached for the current hour. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;application-&gt;rateLimitStatus(); $userTimelineLimit = $response-&gt;resources-&gt;statuses-&gt;{'/statuses/user_timeline'}-&gt;remaining; Blocking Methods Blocking a user create() blocks the user specified in the id parameter as the authenticating user and destroys a friendship to the blocked user if one exists. Returns the blocked user in the requested format when successful. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;blocks-&gt;create('usertoblock'); Removing a block destroy() un-blocks the user specified in the id parameter for the authenticating user. Returns the un-blocked user in the requested format when successful. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;blocks-&gt;destroy('blockeduser'); Who are you blocking (identifiers only) ids() returns an array of user identifiers that the authenticating user is blocking. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;blocks-&gt;ids(); Who are you blocking list() returns an array of user objects that the authenticating user is blocking. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;blocks-&gt;list(); Direct Message Methods Retrieving recent direct messages received messages() returns a list of the 20 most recent direct messages sent to the authenticating user. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;directMessages-&gt;messages(); The message() method accepts an array of optional parameters to modify the query. since_id narrows the returned results to just those statuses after the specified identifier (up to 24 hours old). max_id narrows the returned results to just those statuses earlier than the specified identifier. count specifies the number of statuses to return, up to 200. skip_status , when set to boolean true, \"t\", or 1 will skip including a user's most recent status in the results. include_entities controls whether or not entities, which includes URLs, mentioned users, and hashtags, will be returned. Retrieving recent direct messages sent sent() returns a list of the 20 most recent direct messages sent by the authenticating user. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;directMessages-&gt;sent(); The sent() method accepts an array of optional parameters to modify the query. count specifies the number of statuses to return, up to 20. page specifies the page of results to return, based on the count provided. since_id narrows the returned results to just those statuses after the specified identifier (up to 24 hours old). max_id narrows the returned results to just those statuses earlier than the specified identifier. include_entities controls whether or not entities, which includes URLs, mentioned users, and hashtags, will be returned. Sending a direct message new() sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;directMessages-&gt;new('myfriend', 'mymessage'); Deleting a direct message destroy() destroys the direct message specified in the required id parameter. The authenticating user must be the recipient of the specified direct message. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;directMessages-&gt;destroy(123548); Favorites Methods Retrieving favorites list() returns the 20 most recent favorite statuses for the authenticating user or user specified by the id parameter. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;favorites-&gt;list(); The list() method accepts an array of optional parameters to modify the query. user_id specifies the ID of the user for whom to return the timeline. screen_name specifies the screen name of the user for whom to return the timeline. since_id narrows the returned results to just those statuses after the specified identifier (up to 24 hours old). max_id narrows the returned results to just those statuses earlier than the specified identifier. count specifies the number of statuses to return, up to 200. include_entities controls whether or not entities, which includes URLs, mentioned users, and hashtags, will be returned. Creating favorites create() favorites the status specified in the id parameter as the authenticating user. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;favorites-&gt;create(12351); Deleting a favorite destroy() un-favorites the status specified in the id parameter as the authenticating user. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;favorites-&gt;destroy(12351); Friendship Methods Creating a friend create() befriends the user specified in the id parameter with the authenticating user. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;friendships-&gt;create('mynewfriend'); Deleting a friend destroy() discontinues friendship with the user specified in the id parameter and the authenticating user. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;friendships-&gt;destroy('myoldfriend'); Search Methods Searching for tweets tweets() returns a list of tweets matching the criteria specified in $query . By default, 15 will be returned, but this value may be changed using the count option. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;search-&gt;tweets('#zendframework'); The tweets() method accepts an optional second argument, array of optional parameters to modify the query. since_id narrows the returned results to just those statuses after the specified identifier (up to 24 hours old). max_id narrows the returned results to just those statuses earlier than the specified identifier. count specifies the number of statuses to return, up to 200. include_entities controls whether or not entities, which includes URLs, mentioned users, and hashtags, will be returned. lang indicates which two-letter language code to restrict results to. locale indicates which two-letter language code is being used in the query. geocode can be used to indicate the geographical radius in which tweets should originate; the string should be in the form \"latitude,longitude,radius\", with \"radius\" being a unit followed by one of \"mi\" or \"km\". result_type indicates what type of results to retrieve, and should be one of \"mixed,\" \"recent,\" or \"popular.\" until can be used to specify a the latest date for which to return tweets. Status Methods Retrieving the public timeline sample() returns the 20 most recent statuses from non-protected users with a custom user icon. The public timeline is cached by Twitter for 60 seconds. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;statuses-&gt;sample(); Retrieving the home timeline homeTimeline() returns the 20 most recent statuses posted by the authenticating user and that user's friends. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;statuses-&gt;homeTimeline(); The homeTimeline() method accepts an array of optional parameters to modify the query. since_id narrows the returned results to just those statuses after the specified identifier (up to 24 hours old). max_id narrows the returned results to just those statuses earlier than the specified identifier. count specifies the number of statuses to return, up to 200. trim_user , when set to boolean true, \"t\", or 1, will list the author identifier only in embedded user objects in the statuses returned. contributor_details , when set to boolean true, will return the screen name of any contributors to a status (instead of only the contributor identifier). include_entities controls whether or not entities, which includes URLs, mentioned users, and hashtags, will be returned. exclude_replies controls whether or not status updates that are in reply to other statuses will be returned. Retrieving the user timeline userTimeline() returns the 20 most recent statuses posted from the authenticating user. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;statuses-&gt;userTimeline(); The userTimeline() method accepts an array of optional parameters to modify the query. user_id specifies the ID of the user for whom to return the timeline. screen_name specifies the screen name of the user for whom to return the timeline. since_id narrows the returned results to just those statuses after the specified identifier (up to 24 hours old). max_id narrows the returned results to just those statuses earlier than the specified identifier. count specifies the number of statuses to return, up to 200. trim_user , when set to boolean true, \"t\", or 1, will list the author identifier only in embedded user objects in the statuses returned. contributor_details , when set to boolean true, will return the screen name of any contributors to a status (instead of only the contributor identifier). include_rts controls whether or not to include native retweets in the returned list. exclude_replies controls whether or not status updates that are in reply to other statuses will be returned. Showing user status show() returns a single status, specified by the id parameter below. The status' author will be returned inline. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;statuses-&gt;show(1234); Updating user status update() updates the authenticating user's status. This method requires that you pass in the status update that you want to post to Twitter. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;statuses-&gt;update('My Great Tweet'); The update() method accepts a second additional parameter. inReplyTo_StatusId specifies the ID of an existing status that the status to be posted is in reply to. Showing user replies mentionsTimeline() returns the 20 most recent @replies (status updates prefixed with @username) for the authenticating user. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;statuses-&gt;mentionsTimeline(); The mentionsTimeline() method accepts an array of optional parameters to modify the query. since_id narrows the returned results to just those statuses after the specified identifier (up to 24 hours old). max_id narrows the returned results to just those statuses earlier than the specified identifier. count specifies the number of statuses to return, up to 200. trim_user , when set to boolean true, \"t\", or 1, will list the author identifier only in embedded user objects in the statuses returned. contributor_details , when set to boolean true, will return the screen name of any contributors to a status (instead of only the contributor identifier). include_entities controls whether or not entities, which includes URLs, mentioned users, and hashtags, will be returned. Deleting user status destroy() destroys the status specified by the required id parameter. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;statuses-&gt;destroy(12345); User Methods Showing user information show() returns extended information of a given user, specified by ID or screen name as per the required id parameter below. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;users-&gt;show('myfriend'); Searching for users search() will search for users matching the query provided. $twitter = new Laminas\\Twitter\\Twitter($options); $response = $twitter-&gt;users-&gt;search('Laminas'); The search() method accepts an array of optional parameters to modify the query. count specifies the number of statuses to return, up to 20. page specifies the page of results to return, based on the count provided. include_entities controls whether or not entities, which includes URLs, mentioned users, and hashtags, will be returned.","title":"Introduction"},{"location":"intro/#laminas-twitter","text":"","title":"laminas-twitter"},{"location":"intro/#introduction","text":"Laminas\\Twitter\\Twitter provides a client for the Twitter API . Laminas\\Twitter\\Twitter allows you to query the public timeline. If you provide a username and OAuth details for Twitter, or your access token and secret, it will allow you to get and update your status, reply to friends, direct message friends, mark tweets as favorites, and much more. Laminas\\Twitter\\Twitter wraps all web service operations, including OAuth, and all methods return an instance of Laminas\\Twitter\\Response . Laminas\\Twitter\\Twitter is broken up into subsections so you can easily identify which type of call is being requested. account allows you to check that your account credentials are valid application allows you to check your API rate limits. blocks blocks and unblocks users from following you. directMessages retrieves the authenticated user's received direct messages, deletes direct messages, and sends new direct messages. favorites lists, creates, and removes favorite tweets. friendships creates and removes friendships for the authenticated user. search allows you to search statuses for specific criteria. statuses retrieves the public and user timelines and shows, updates, destroys, and retrieves replies for the authenticated user. users retrieves friends and followers for the authenticated user and returns extended information about a passed user.","title":"Introduction"},{"location":"intro/#installation","text":"Use Composer to install this package: $ composer require laminas/laminas-twitter","title":"Installation"},{"location":"intro/#quick-start","text":"To get started, first you'll need to either create a new application with Twitter, or get the details of an existing one you control. To do this: Go to https://developer.twitter.com/ and sign in. Go to https://apps.twitter.com/ Either create a new application, or select an existing one. On the application's settings page, grab the following information: From the header \"OAuth settings\", grab the \"Consumer key\" and \"Consumer secret\" values. From the header \"Your access token\", grab the \"Access token\" and \"Access token secret\" values. Armed with this information, you can now configure and create your Laminas\\Twitter\\Twitter instance: $config = [ 'access_token' =&gt; [ 'token' =&gt; 'twitter-access-token-here', 'secret' =&gt; 'twitter-access-secret-here', ], 'oauth_options' =&gt; [ 'consumerKey' =&gt; 'twitter-consumer-key-here', 'consumerSecret' =&gt; 'twitter-consumer-secret-here', ], 'http_client_options' =&gt; [ 'adapter' =&gt; Laminas\\Http\\Client\\Adapter\\Curl::class, 'curloptions' =&gt; [ CURLOPT_SSL_VERIFYHOST =&gt; false, CURLOPT_SSL_VERIFYPEER =&gt; false, ], ], ]; $twitter = new Laminas\\Twitter\\Twitter($config); Make sure you substitute the values you discovered earlier in the configuration before attempting to connect.","title":"Quick Start"},{"location":"intro/#authentication","text":"With the exception of fetching the public timeline, Laminas\\Twitter\\Twitter requires authentication as a valid user. This is achieved using the OAuth authentication protocol. OAuth is the only supported authentication mode for Twitter as of August 2010. The OAuth implementation used by Laminas\\Twitter\\Twitter is laminas-oauth .","title":"Authentication"},{"location":"intro/#account-methods","text":"","title":"Account Methods"},{"location":"intro/#application-methods","text":"","title":"Application Methods"},{"location":"intro/#blocking-methods","text":"","title":"Blocking Methods"},{"location":"intro/#direct-message-methods","text":"","title":"Direct Message Methods"},{"location":"intro/#favorites-methods","text":"","title":"Favorites Methods"},{"location":"intro/#friendship-methods","text":"","title":"Friendship Methods"},{"location":"intro/#search-methods","text":"","title":"Search Methods"},{"location":"intro/#status-methods","text":"","title":"Status Methods"},{"location":"intro/#user-methods","text":"","title":"User Methods"}]}